{"/home/travis/build/npmtest/node-npmtest-disc/test.js":"/* istanbul instrument in package npmtest_disc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-disc/lib.npmtest_disc.js":"/* istanbul instrument in package npmtest_disc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_disc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_disc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-disc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-disc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_disc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_disc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_disc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_disc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_disc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_disc.__dirname + '/lib.npmtest_disc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-disc/node_modules/disc/index.js":"var unpack = require('browser-unpack')\nvar builtins = require('builtins')\nvar through = require('through')\nvar flatten = require('flatten')\nvar duplex = require('duplexer')\nvar pluck = require('plucker')\nvar uniq = require('uniq')\n\nvar commondir = require('commondir')\nvar fileTree = require('file-tree')\nvar path = require('path')\nvar fs = require('fs')\nvar bl = require('bl')\n\nvar versions = require('./lib/versions')\n\nmodule.exports = createStream\ncreateStream.json = json\ncreateStream.bundle = bundle\n\nfunction createStream(opts) {\n  opts = opts || {}\n\n  var buffer = bl(function(err, content) {\n    if (err) return stream.emit('error', err)\n\n    bundle(content, opts, function(err, html) {\n      if (err) return stream.emit('error', err)\n\n      output.queue(html)\n      output.queue(null)\n    })\n  })\n\n  var output = through()\n  var stream = duplex(buffer, output)\n\n  return stream\n}\n\nfunction json(bundles, callback) {\n  var modules = flatten(bundles\n    .map(String)\n    .map(unpack)\n  ).map(function(module) {\n    if (typeof module === 'undefined') return callback(new Error(\n      'Unable to compile one of the supplied bundles!'\n    ))\n\n    if (typeof module.id !== 'number') return module\n\n    return callback(new Error(\n      'Please recompile this browserify bundle using the --full-paths flag ' +\n      '(when using the command-line interface) or with the fullPaths option ' +\n      'set to true (when using the JavaScript API).'\n    ))\n  })\n\n  modules = modules.filter(function(module) {\n    return module && !isEmpty(module)\n  })\n\n  if (!modules.length) return\n\n  var browserifyModules = modules.filter(fromBrowserify(true))\n  var otherModules = modules.filter(function(module) {\n    if (path.basename(module.id) === '_empty.js') return false\n    if (browserifyModules.indexOf(module) === -1) return true\n  })\n\n  var root = commondir(otherModules.map(pluck('id')))\n\n  browserifyModules.forEach(function(module) {\n    var regex = /^.+\\/node_modules\\/browserify\\/(?:node_modules\\/)(.+)$/g\n\n    module.id = module.id.replace(regex, function(_, subpath) {\n      return path.resolve(root, 'browserify-core/' + subpath)\n    })\n\n    return module\n  })\n\n  uniq(modules, function(a, b) {\n    return a.id === b.id ? 0 : 1\n  }, true)\n\n  var ids  = modules.map(pluck('id'))\n  var main = path.basename(root)\n\n  var byid = modules.reduce(function(memo, mod) {\n    memo[mod.id] = mod\n    return memo\n  }, {})\n\n  fileTree(ids, function(id, next) {\n    var row = byid[id]\n\n    next(null, {\n        size: row.source.length\n      , deps: Object.keys(row.deps).length\n      , path: id\n    })\n  }, function(err, tree) {\n    if (err) return callback(err)\n\n    tree = { name: main, children: tree }\n    dirsizes(tree)\n    versions(tree)\n    callback(null, tree)\n  })\n}\n\nfunction bundle(bundles, opts, callback) {\n  bundles = Array.isArray(bundles)\n    ? bundles\n    : bundles ? [bundles] : []\n\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = {}\n  }\n\n  opts = opts || {}\n  callback = callback || noop\n\n  var header = opts.header || opts.button || ''\n  var footer = opts.footer || ''\n\n  return json(bundles, function(err, data) {\n    if (err) return callback(err)\n\n    data.mode = opts.mode || 'size'\n    data = '<script type=\"text/javascript\">'\n      + ';window.disc = ('\n      + JSON.stringify(data)\n      + ');</script>'\n\n    var script = '<script type=\"text/javascript\">'\n      + bundled().replace(/\\/script/gi, '\\\\/script')\n      + '</script>'\n\n    callback(null, template()({\n        scripts: script\n      , styles: styles()\n      , markdown: footer\n      , header: header\n      , data: data\n    }))\n  })\n}\n\nfunction template() {\n  if (template.text) return template.text\n  return template.text = require('./lib/lazy-template')(\n    fs.readFileSync(__dirname + '/src/base.html', 'utf8')\n  )\n}\n\nfunction styles() {\n  if (styles.text) return styles.text\n  return styles.text = fs.readFileSync(__dirname + '/build/style.css', 'utf8')\n}\n\nfunction bundled() {\n  if (bundled.text) return bundled.text\n  return bundled.text = fs.readFileSync(__dirname + '/build/bundle.js', 'utf8')\n}\n\nfunction dirsizes(child) {\n  return child.size = \"size\" in child ? child.size : child.children.reduce(function(size, child) {\n    return size + (\"size\" in child ? child.size : dirsizes(child))\n  }, 0)\n}\n\nfunction noop(){}\n\nfunction fromBrowserify(yes) {\n  var existsCache = {}\n  var no = !yes\n\n  return function(module) {\n    var search = '/node_modules/browserify'\n    var idx  = module.id.indexOf(search)\n    var from = idx !== -1\n\n    if (!from) return no\n\n    // special case for process.js\n    // from insert-module-globals\n    if (\n      module.id.indexOf('insert-module-globals') !== -1 &&\n      module.id.split(path.sep).slice(-2).join('/') === 'process/browser.js'\n    ) return yes\n\n    // Look up browserify's builtins file to\n    // determine if this file is part of browserify\n    // core.\n    var builtinFile = (\n      module.id.slice(0, idx + search.length) +\n      '/lib/builtins.js'\n    )\n\n    if (!(builtinFile in existsCache)) {\n      existsCache[builtinFile] = values(\n        fs.existsSync(builtinFile) &&\n        require(builtinFile) || {}\n      )\n    }\n\n    var localBuiltins = existsCache[builtinFile]\n    var bidx = localBuiltins.indexOf(module.id)\n\n    if (bidx !== -1) return yes\n\n    // Guess remaining helper files based on module\n    // name: this should probably be improved in the\n    // future.\n    var split = module.id.split(path.sep)\n    var j = split.length - 1\n\n    while (split[--j] !== 'node_modules');;\n\n    var dir = split.slice(j + 1)[0].replace(/\\-(?:browser(?:ify)?|es3)$/g, '')\n    if (dir === 'Base64') return yes\n    if (dir === 'base64-js') return yes\n    if (dir === 'inherits') return yes\n    if (dir === 'process') return yes\n    if (dir === 'ieee754') return yes\n    if (builtins.indexOf(dir) !== -1) return yes\n\n    return no\n  }\n}\n\nfunction values(object) {\n  return Object.keys(object).map(function(key) {\n    return object[key]\n  })\n}\n\nfunction isEmpty(module) {\n  return (\n    path.basename(module.id) === '_empty.js' &&\n  (!fs.existsSync(module.id) || !fs.statSync(module.id).size)\n  )\n}\n","/home/travis/build/npmtest/node-npmtest-disc/node_modules/disc/lib/versions.js":"var path = require('path')\nvar fs = require('fs')\n\nmodule.exports = versions\n\nfunction versions(child) {\n  if (!child.children) return\n  if (child.path) return child.children.forEach(versions)\n  if (!child.children.length) return\n  if (!child.children[0].path) return child.children.forEach(versions)\n\n  var first = null\n  for (var i = 0; i < child.children.length; i++) {\n    if (first = child.children[i].path) break\n  }\n\n  if (!first) return\n\n  child.path = path.resolve(first, '..')\n\n  var pkgFile = path.resolve(child.path, 'package.json')\n\n  if (!fs.existsSync(pkgFile)) return\n\n  try {\n    var version = JSON.parse(\n      fs.readFileSync(pkgFile, 'utf8')\n    ).version\n  } catch(e) { return }\n\n  child.name += '@'\n  child.name += version\n  child.children.forEach(versions)\n}\n","/home/travis/build/npmtest/node-npmtest-disc/node_modules/disc/lib/bundle-css.js":"var autoprefixer = require('autoprefixer')('last 2 versions')\n  , clean = require('clean-css')\n  , rework = require('rework')\n  , fs = require('fs')\n\nvar css = fs.readFileSync(__dirname + '/../src/style.css', 'utf8')\n\ncss = rework(css)\n  .use(rework.inline(__dirname + '/../img'))\n  .toString()\n\ncss = autoprefixer.process(\n  css\n).css\n\ncss = new clean()\n  .minify(css)\n\nconsole.log(css)\n","/home/travis/build/npmtest/node-npmtest-disc/node_modules/disc/lib/bundle-demo.js":"var browserify = require('browserify')\n  , marked = require('marked')\n  , btoa = require('btoa')\n  , disc = require('../')\n  , fs = require('fs')\n\nvar readme = fs.readFileSync(__dirname + '/../README.md', 'utf8')\nvar button = fs.readFileSync(__dirname + '/../img/fork.png')\n\nbutton = btoa(button)\nbutton = 'data:image/png;base64,' + button\n\nbrowserify(require.resolve('browserify'), {\n  fullPaths: true\n}).bundle()\n  .pipe(disc({\n      mode: 'count'\n    , footer: marked(readme)\n    , header: [\n        '<a href=\"https://github.com/hughsk/disc\">'\n      , '<img style=\"position:absolute;top:-8px;left:-8px;border:0;\"'\n      , 'src=\"' + button + '\"'\n      , 'alt=\"Fork me on GitHub\"'\n      , '></a>'\n    ].join(' ')\n  }))\n  .pipe(process.stdout)\n","/home/travis/build/npmtest/node-npmtest-disc/node_modules/disc/lib/lazy-template.js":"module.exports = compile\n\nfunction compile(html) {\n  return function(data) {\n    var out = html\n    data = data || {}\n    Object.keys(data).forEach(function(key) {\n      out = out.replace('<!-- @@' + key + ' -->', data[key])\n    })\n    return out\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-disc/node_modules/disc/src/schemes.js":"var extname = require('path').extname\nvar d3 = require('d3')\n\nvar schemes = []\n\nvar original = {\n    name: 'Original'\n  , background: '#6A4A3C'\n  , specials: {\n    node_modules: '#FF8553'\n  }\n  , main: [\n      '#00A0B0'\n    , '#CC333F'\n    , '#EB6841'\n    , '#EDC951'\n  ]\n}\n\noriginal.main = []\n  .concat(original.main.map(lighten(0.7)))\n  .concat(original.main.map(lighten(1.4)))\n  .concat(original.main.map(lighten(2.0)))\n\nvar highlights = {\n    name: 'Structure Highlights'\n  , background: '#1A1C1E'\n  , specials: {\n      node_modules: '#E1F200'\n    , lib: '#FF9D3C'\n  }\n  , main: [\n      '#8E99A4'\n    , '#F7F7F7'\n    , '#6C747C'\n  ]\n}\n\nvar pastel = {\n    name: 'Pastel'\n  , background: '#362F34'\n  , specials: {}\n  , main: [\n      '#D05931'\n    , '#3E8FE9'\n    , '#2AB256'\n    , '#F8DD3D'\n  ]\n}\n\npastel.main = []\n  .concat(pastel.main.map(lighten(2.8)))\n  .concat(pastel.main.map(lighten(2)))\n\nvar typeScale = d3.scale.ordinal()\n  .range([\n      '#5A5B8F'\n    , '#FFE53D'\n    , '#47F0FF'\n    , '#CD6FF2'\n    , '#EB6E6A'\n    , '#EB9D6A'\n    , '#528AF2'\n  ])\n\nvar types = {\n    name: 'File Types'\n  , background: '#160F1F'\n  , specials: {}\n  , main: typeScale.range()\n  , modifier: function(color, root) {\n    return typeScale(extname(this.name))\n  }\n}\n\nvar core = {\n    name: 'Browserify Core'\n  , background: '#24131D'\n  , specials: {}\n  , main: [\n    '#FBBF60',\n    '#CE3F46'\n  ]\n  , modifier: function(color, root) {\n    var curr = this\n\n    do {\n      if (curr.name === 'browserify-core') {\n        return core.main[1]\n      }\n    } while (curr = curr.parent)\n\n    return core.main[0]\n  }\n}\n\nschemes.push(\n    original\n  , highlights\n  , pastel\n  , types\n  , core\n)\n\nfunction lighten(n) {\n  return function(c) {\n    return String(d3.rgb(c).brighter(n))\n  }\n}\n\nfunction identity(a) {\n  return a\n}\n\nmodule.exports = schemes.map(function(d) {\n  d.all = d.main.slice()\n\n  Object.keys(d.specials).forEach(function(s) {\n    d.all.push(d.specials[s])\n  })\n\n  d.modifier = d.modifier || identity\n\n  return d\n})\n"}